// File: Test/FileReadingTests/MetaMorpheusProseFileTests.cs

using NUnit.Framework;
using Readers.InternalResults;
using System.IO;

namespace Test.FileReadingTests;

[TestFixture]
public class MetaMorpheusProseFileTests
{
    private string _tempDir;
    private string _proseFilePath;

    private const string ProseFileContent = """
The data analysis was performed using MetaMorpheus version 1.0.7, available at https://github.com/smith-chem-wisc/MetaMorpheus.

Data files were processed on a computer running Microsoft Windows 10.0.22631 with a 64-bit Intel(R) Xeon(R) Gold 5220R CPU @ 2.20GHz processor with 48 threads and 128GB installed RAM. 

The total time to perform the Average task on 6 spectra file(s) was 67.45 minutes.

Published works using MetaMorpheus software are encouraged to cite the appropriate publications listed in the reference guide, found here: https://github.com/smith-chem-wisc/MetaMorpheus/blob/master/README.md.

Spectra files: 
	B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_1-calib.mzML
	B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_2-calib.mzML
	B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_3-calib.mzML
	B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_4-calib.mzML
	B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_5-calib.mzML
	B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_6-calib.mzML
Databases:
	B:\Users\Nic\Chimeras\Mann_11cell_analysis\uniprotkb_human_proteome_AND_reviewed_t_2024_03_22.xml Downloaded on: 03/27/2024 14:59:19
""";

    [SetUp]
    public void SetUp()
    {
        _tempDir = Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
        Directory.CreateDirectory(_tempDir);
        _proseFilePath = Path.Combine(_tempDir, "AutoGeneratedManuscriptProse.txt");
        File.WriteAllText(_proseFilePath, ProseFileContent);
    }

    [TearDown]
    public void TearDown()
    {
        if (Directory.Exists(_tempDir))
            Directory.Delete(_tempDir, true);
    }

    [Test]
    public void LocateInDirectory_FindsAndParsesProseFile()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);

        Assert.That(proseFile, Is.Not.Null);
        Assert.That(proseFile!.MetaMorpheusVersion, Is.EqualTo("1.0.7"));
        Assert.That(proseFile.FilePath, Is.EqualTo(_proseFilePath));

        Assert.That(proseFile.SpectraFilePaths, Is.Not.Null);
        Assert.That(proseFile.SpectraFilePaths.Length, Is.EqualTo(6));
        Assert.That(proseFile.SpectraFilePaths[0], Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_1-calib.mzML"));
        Assert.That(proseFile.SpectraFilePaths[5], Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_6-calib.mzML"));

        Assert.That(proseFile.DatabasePaths, Is.Not.Null);
        Assert.That(proseFile.DatabasePaths.Length, Is.EqualTo(1));
        Assert.That(proseFile.DatabasePaths[0], Is.EqualTo(@"B:\Users\Nic\Chimeras\Mann_11cell_analysis\uniprotkb_human_proteome_AND_reviewed_t_2024_03_22.xml"));
    }

    [Test]
    public void LocateInDirectory_Nested_FindsAndParsesProseFile()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(TestContext.CurrentContext.TestDirectory);

        Assert.That(proseFile, Is.Not.Null);
        Assert.That(proseFile!.MetaMorpheusVersion, Is.EqualTo("1.0.7"));

        var expectedPath = Path.Combine(TestContext.CurrentContext.TestDirectory, "FileReadingTests", "SearchResults", "AutoGeneratedManuscriptProse.txt");    
        Assert.That(proseFile.FilePath, Is.EqualTo(expectedPath));

        Assert.That(proseFile.SpectraFilePaths, Is.Not.Null);
        Assert.That(proseFile.SpectraFilePaths.Length, Is.EqualTo(6));
        Assert.That(proseFile.SpectraFilePaths[0], Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_1-calib.mzML"));
        Assert.That(proseFile.SpectraFilePaths[5], Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_6-calib.mzML"));

        Assert.That(proseFile.DatabasePaths, Is.Not.Null);
        Assert.That(proseFile.DatabasePaths.Length, Is.EqualTo(1));
        Assert.That(proseFile.DatabasePaths[0], Is.EqualTo(@"B:\Users\Nic\Chimeras\Mann_11cell_analysis\uniprotkb_human_proteome_AND_reviewed_t_2024_03_22.xml"));
    }

    [Test] 
    public void FindUnaveragedFile_ReturnsCorrectUnaveragedPath_ForAveragedAndCalib()
    {
        // Arrange
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        // Create a dummy averaged file path that matches the first spectra file, but with -averaged
        var original = proseFile!.SpectraFilePaths[0]; // e.g. ..._1-calib.mzML

        // Change the original path to a file that exists in the temp directory for cross-platform compatibility
        var localOriginal = Path.Combine(_tempDir, "20100726_Velos1_TaGe_SA_HepG2_2-calib.mzML");
        File.WriteAllText(localOriginal, "dummy");
        proseFile.SpectraFilePaths[0] = localOriginal;

        var averagedFileName = Path.GetFileNameWithoutExtension(localOriginal).Replace("-calib", "") + "-averaged.mzML";
        var averagedFilePath = Path.Combine(_tempDir, averagedFileName);

        // The method requires the file to exist
        File.WriteAllText(averagedFilePath, "dummy");

        // Act
        var result = proseFile.FindUnaveragedFile(averagedFilePath);

        // Assert
        Assert.That(result, Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_2-calib.mzML"));
    }

    [Test]
    public void FindUnaveragedFile_AveragedFileDoesNotExist_ReturnsNull()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        var nonExistentPath = Path.Combine(_tempDir, "nonexistent-averaged.mzML");
        var result = proseFile!.FindUnaveragedFile(nonExistentPath);

        Assert.That(result, Is.Null);
    }
    [Test]
    public void FindUnaveragedFile_UnaveragedFileDoesNotExist_ReturnsNull()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        // Ensure unaveraged file does not exist. 
        proseFile!.SpectraFilePaths[0] = proseFile.SpectraFilePaths[0].Replace("B:", "W:");
        var original = proseFile!.SpectraFilePaths[0];
        var averagedFileName = Path.GetFileNameWithoutExtension(original).Replace("-calib", "") + "-averaged.mzML";
        var averagedFilePath = Path.Combine(_tempDir, averagedFileName);

        File.WriteAllText(averagedFilePath, "dummy");

        // Simulate that the unaveraged file does not exist
        // (do not create a file at the path 'original')

        var result = proseFile.FindUnaveragedFile(averagedFilePath);

        Assert.That(result, Is.Null);
    }

    [Test]
    public void FindUnaveragedFile_ReturnsNull_IfNoMatchingUnaveragedFile()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        // Create a file with a name that will not match any cleaned spectra file name
        var unmatchedAveragedFilePath = Path.Combine(_tempDir, "not_in_list-averaged.mzML");
        File.WriteAllText(unmatchedAveragedFilePath, "dummy");

        var result = proseFile!.FindUnaveragedFile(unmatchedAveragedFilePath);

        Assert.That(result, Is.Null);
    }

    [Test] 
    public void FindUnaveragedFile_HandlesCalibAndAveragedSuffixes()
    {
        var proseFile = MetaMorpheusProseFile.LocateInDirectory(_tempDir);
        Assert.That(proseFile, Is.Not.Null);

        // Change the original path to a file that exists in the temp directory for cross-platform compatibility
        var localOriginal = Path.Combine(_tempDir, "20100726_Velos1_TaGe_SA_HepG2_2.mzML");
        File.WriteAllText(localOriginal, "dummy");
        proseFile.SpectraFilePaths[0] = localOriginal;

        // Use a spectra file with -calib, simulate an averaged version
        var original = proseFile!.SpectraFilePaths[0]; // e.g. ..._3-calib.mzML
        var baseName = Path.GetFileNameWithoutExtension(original).Replace("-calib", "");
        var averagedFileName = baseName + "-calib-averaged.mzML";
        var averagedFilePath = Path.Combine(_tempDir, averagedFileName);

        File.WriteAllText(averagedFilePath, "dummy");

        var result = proseFile.FindUnaveragedFile(averagedFilePath);

        Assert.That(result, Is.EqualTo(@"B:\RawSpectraFiles\Mann_11cell_lines\HepG2\107_Calibrated-HepG2_2\Task1CalibrationTask\20100726_Velos1_TaGe_SA_HepG2_2-calib.mzML"));
    }
}
